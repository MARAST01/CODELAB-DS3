- ¿Qué es Domain-Driven Design (DDD) y cuál es su objetivo principal?
    - DDD es una metodología de modelado de software que busca alinear el diseño del sistema con el dominio del negocio. 
      Su objetivo principal es que la solución refleje fielmente los procesos empresariales, facilitando el mantenimiento 
      y evolución del sistema.

- ¿Cuál es la diferencia entre una Entidad y un Objeto de Valor en DDD?
    - Entidad: Tiene una identidad única y persiste a lo largo del tiempo, incluso si sus atributos cambian.
    - Objeto de Valor: No tiene identidad propia, es inmutable y se usa para describir atributos de una entidad.

- ¿Qué es un Bounded Context y por qué es importante en DDD?
    - Un Bounded Context define los límites dentro de los cuales un modelo de dominio es consistente. Es importante porque 
      ayuda a dividir el sistema en módulos autónomos, evitando ambigüedades y conflictos entre diferentes partes del negocio.

- ¿Cuál es el propósito del Lenguaje Ubicuo (Ubiquitous Language) en DDD?
    - Es un lenguaje común entre desarrolladores y expertos del dominio que facilita la comunicación y evita malentendidos. 
      Asegura que todos usen los mismos términos para describir conceptos del negocio.

- ¿Qué es un Agregado (Aggregate) y cómo garantiza la consistencia en el dominio?
    - Un Agregado es un grupo de entidades y objetos de valor que forman una unidad lógica con una entidad raíz. Garantiza 
      la consistencia porque todas las modificaciones deben pasar por la entidad raíz, asegurando reglas de negocio y evitando 
      estados inconsistentes.

- ¿Cómo se relacionan los Repositorios en DDD con la infraestructura de persistencia?
    - Los Repositorios actúan como una abstracción entre el dominio y la infraestructura de persistencia, proporcionando acceso 
      a los datos sin exponer detalles de la base de datos. Facilitan el manejo de entidades y agregados sin acoplar la lógica de 
      negocio a la implementación del almacenamiento.

- ¿Qué son los Eventos de Dominio y cómo mejoran la comunicación entre Bounded Contexts?
    - Los Eventos de Dominio representan cambios o sucesos importantes dentro del dominio. Mejoran la comunicación entre Bounded 
      Contexts al permitir una arquitectura basada en eventos (Event-Driven), reduciendo el acoplamiento y facilitando la escalabilidad.

- ¿Cómo se diferencian los Servicios de Aplicación y los Servicios de Dominio en DDD?
    - Servicio de Aplicación: Orquesta la ejecución de reglas de negocio y coordina flujos entre diferentes partes del sistema.
    - Servicio de Dominio: Contiene lógica de negocio que no pertenece a una entidad o agregado específico.

- ¿Cómo DDD facilita el diseño de software en sistemas complejos y escalables?
    - DDD divide el sistema en módulos autónomos (Bounded Contexts) y encapsula la lógica en entidades, agregados y servicios. 
      Esto facilita el mantenimiento, la evolución del software y su escalabilidad, ya que cada módulo puede desarrollarse y 
      desplegarse de manera independiente.

- ¿Cómo se puede combinar DDD con Clean Architecture en una aplicación de microservicios?
    - Se pueden combinar utilizando DDD para modelar el dominio y Clean Architecture para estructurar la aplicación en capas 
      bien definidas. En microservicios, cada Bounded Context puede implementarse como un servicio independiente, aplicando 
      principios de Clean Architecture para separar la lógica de negocio, la infraestructura y la interfaz de usuario.